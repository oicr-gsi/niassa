/*
 * Copyright (C) 2016 SeqWare
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.sourceforge.seqware.webservice.resources.tables;

import net.sourceforge.seqware.common.model.LimsKey;
import net.sourceforge.seqware.common.util.xmltools.JaxbObject;
import net.sourceforge.seqware.common.util.xmltools.XmlTools;
import net.sourceforge.seqware.webservice.resources.ClientResourceInstance;
import org.joda.time.DateTime;
import static org.junit.Assert.*;
import org.junit.Test;
import org.restlet.representation.Representation;
import org.w3c.dom.Document;

/**
 *
 * @author mlaszloffy
 */
public class LimsKeyResourceTest extends DatabaseResourceTest {

    private final LimsKey testLimsKey;

    public LimsKeyResourceTest() {
        super("/limskey");

        testLimsKey = new LimsKey();
        testLimsKey.setProvider("provider1");
        testLimsKey.setId("remoteId1");
        testLimsKey.setVersion("3053981115502a01b1115696117cf53d8824a848");
        testLimsKey.setLastModified(DateTime.parse("2016-01-01T00:00:00"));
    }

    @Override
    public void testGet() {
        LimsKey limsKeyFromPost = post(testLimsKey);
        LimsKey limsKeyFromGet = getFromSwid(limsKeyFromPost.getSwAccession());
        assertEquals(limsKeyFromGet, limsKeyFromPost);
    }

    @Test
    public void testGetWithId() {
        LimsKey limsKeyFromPost = post(testLimsKey);
        LimsKey limsKeyFromGet = getFromId(limsKeyFromPost.getLimsKeyId());
        assertEquals(limsKeyFromGet, limsKeyFromPost);
    }

    @Override
    public void testPost() {
        System.out.println(getRelativeURI() + " POST");
        LimsKey returnedKey = post(testLimsKey);
        assertNotNull(returnedKey);

        //test values
        assertEquals(testLimsKey.getProvider(), returnedKey.getProvider());
        assertEquals(testLimsKey.getId(), returnedKey.getId());
        assertEquals(testLimsKey.getVersion(), returnedKey.getVersion());
        assertEquals(testLimsKey.getLastModified(), returnedKey.getLastModified());

        //generated by the LimsKey service
        assertNotNull(returnedKey.getCreateTimestamp());
        assertNotNull(returnedKey.getUpdateTimestamp());
        assertNotNull(returnedKey.getId());
        assertNotNull(returnedKey.getSwAccession());
    }

    private LimsKey getFromSwid(Integer swid) {
        LimsKey returnedLimsKey = null;
        try {
            Representation rep = ClientResourceInstance.getChild("/limskey/" + swid).get();
            returnedLimsKey = (LimsKey) XmlTools.unMarshal(new JaxbObject<LimsKey>(), new LimsKey(), rep.getText());
            rep.exhaust();
            rep.release();
        } catch (Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
        }
        return returnedLimsKey;
    }

    private LimsKey getFromId(Integer id) {
        LimsKey returnedLimsKey = null;
        try {
            Representation rep = ClientResourceInstance.getChild("/limskey?id=" + id).get();
            returnedLimsKey = (LimsKey) XmlTools.unMarshal(new JaxbObject<LimsKey>(), new LimsKey(), rep.getText());
            rep.exhaust();
            rep.release();
        } catch (Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
        }
        return returnedLimsKey;
    }

    private LimsKey post(LimsKey lk) {
        LimsKey returnedLimsKey = null;
        try {
            Document doc = XmlTools.marshalToDocument(new JaxbObject<LimsKey>(), lk); //object to xml
            Representation rep = resource.post(XmlTools.getRepresentation(doc)); //post
            returnedLimsKey = (LimsKey) XmlTools.unMarshal(new JaxbObject<LimsKey>(), new LimsKey(), rep.getText());
            rep.exhaust();
            rep.release();
        } catch (Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
        }
        return returnedLimsKey;
    }

}
