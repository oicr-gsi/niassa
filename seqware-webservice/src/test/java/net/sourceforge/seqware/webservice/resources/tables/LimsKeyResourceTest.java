/*
 * Copyright (C) 2016 SeqWare
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.sourceforge.seqware.webservice.resources.tables;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.time.ZoneId;
import java.time.ZonedDateTime;

import org.junit.Test;
import org.xml.sax.SAXException;

import net.sourceforge.seqware.common.model.IUS;
import net.sourceforge.seqware.common.model.LimsKey;
import net.sourceforge.seqware.webservice.resources.SeqwareResourceClient;

/**
 *
 * @author mlaszloffy
 */
public class LimsKeyResourceTest extends DatabaseResourceTest {

    private final LimsKey testLimsKey;
    private final SeqwareResourceClient<LimsKey> limsKeyClient;
    private final SeqwareResourceClient<IUS> iusClient;

    public LimsKeyResourceTest() {
        super("/limskey");

        testLimsKey = new LimsKey();
        testLimsKey.setProvider("provider1");
        testLimsKey.setId("remoteId1");
        testLimsKey.setVersion("3053981115502a01b1115696117cf53d8824a848");
        testLimsKey.setLastModified(ZonedDateTime.parse("2016-01-01T00:00:00Z"));

        limsKeyClient = new SeqwareResourceClient<>(LimsKey.class, getRelativeURI());
        iusClient = new SeqwareResourceClient<>(IUS.class, "/ius");
    }

    @Override
    public void testGet() {
        LimsKey limsKeyFromPost = null;
        try {
            limsKeyFromPost = limsKeyClient.post(testLimsKey);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        LimsKey limsKeyFromGet = null;
        try {
            limsKeyFromGet = limsKeyClient.getFromSwid(limsKeyFromPost.getSwAccession());
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        assertEquals(limsKeyFromGet, limsKeyFromPost);
    }

    @Test
    public void testGetWithId() {
        LimsKey limsKeyFromPost = null;
        try {
            limsKeyFromPost = limsKeyClient.post(testLimsKey);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        LimsKey limsKeyFromGet = null;
        try {
            limsKeyFromGet = limsKeyClient.getFromId(limsKeyFromPost.getLimsKeyId());
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        assertEquals(limsKeyFromGet, limsKeyFromPost);
    }

    @Override
    public void testPost() {
        System.out.println(getRelativeURI() + " POST");
        LimsKey returnedKey = null;
        try {
            returnedKey = limsKeyClient.post(testLimsKey);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        assertNotNull(returnedKey);

        //test values
        assertEquals(testLimsKey.getProvider(), returnedKey.getProvider());
        assertEquals(testLimsKey.getId(), returnedKey.getId());
        assertEquals(testLimsKey.getVersion(), returnedKey.getVersion());
        assertEquals(testLimsKey.getLastModified(), returnedKey.getLastModified());

        //generated by the LimsKey service
        assertNotNull(returnedKey.getCreateTimestamp());
        assertNotNull(returnedKey.getUpdateTimestamp());
        assertNotNull(returnedKey.getId());
        assertNotNull(returnedKey.getSwAccession());
    }

    @Override
    public void testPut() {
        LimsKey lk = new LimsKey();
        lk.setProvider("provider");
        lk.setId("id");
        lk.setVersion("version");
        lk.setLastModified(ZonedDateTime.now());
        try {
            lk = limsKeyClient.post(lk);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        assertNotNull(lk);
        Integer expectedSwid = lk.getSwAccession();
        Integer expectedLimsKeyId = lk.getLimsKeyId();

        //test update
        String expectedProvider = "provider";
        String expectedId = "id";
        String expectedVersion = "version";
        ZonedDateTime expectedLastModified = ZonedDateTime.now(ZoneId.of("Z"));

        lk.setProvider(expectedProvider);
        lk.setId(expectedId);
        lk.setVersion(expectedVersion);
        lk.setLastModified(expectedLastModified);
        try {
            lk = limsKeyClient.put(lk);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }
        assertEquals(expectedProvider, lk.getProvider());
        assertEquals(expectedId, lk.getId());
        assertEquals(expectedVersion, lk.getVersion());
        assertEquals(expectedLastModified, lk.getLastModified());
        assertEquals(expectedLimsKeyId, lk.getLimsKeyId());
        assertEquals(expectedSwid, lk.getSwAccession());
    }

    @Override
    public void testDelete() {
        LimsKey lk = new LimsKey();
        lk.setProvider("provider");
        lk.setId("id");
        lk.setVersion("version");
        lk.setLastModified(ZonedDateTime.now());

        try {
            limsKeyClient.delete(lk);
            fail("Deletion of missing LimsKey should have failed");
        } catch (Exception ex) {
        }

        try {
            lk = limsKeyClient.post(lk);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }

        IUS ius = new IUS();
        ius.setLimsKey(lk);
        try {
            ius = iusClient.post(ius);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }

        try {
            limsKeyClient.delete(lk);
            fail("Deletion of non-orphaned LimsKey was successful");
        } catch (Exception ex) {
        }

        //orphan the LimsKey
        ius.setLimsKey(new LimsKey());
        try {
            ius = iusClient.put(ius);
        } catch (IOException | SAXException ex) {
            fail(ex.getMessage());
        }

        try {
            limsKeyClient.delete(lk);
        } catch (IOException ex) {
            fail(ex.getMessage());
        }
    }

}
